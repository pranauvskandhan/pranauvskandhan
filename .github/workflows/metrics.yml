name: Contribution Radar

on:
  schedule:
    - cron: "0 6 * * *"      # daily at 06:00 IST approx
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      USERNAME: pranauvskandhan

    steps:
      - uses: actions/checkout@v4

      - name: Generate radar SVG
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.METRICS_TOKEN }}   # CLASSIC PAT
          script: |
            const fs = require('fs');

            // 1) Get last-year contribution counts (commits, PRs, reviews, issues)
            const to = new Date();
            const from = new Date();
            from.setFullYear(to.getFullYear() - 1);

            const query = `
            query($login:String!,$from:DateTime!,$to:DateTime!){
              user(login:$login){
                contributionsCollection(from:$from,to:$to){
                  totalCommitContributions
                  totalPullRequestContributions
                  totalPullRequestReviewContributions
                  totalIssueContributions
                }
              }
            }`;

            const res = await github.graphql(query, {
              login: process.env.USERNAME,
              from: from.toISOString(),
              to: to.toISOString()
            });

            const c = res.user.contributionsCollection;
            const data = {
              Commits: c.totalCommitContributions || 0,
              "Pull requests": c.totalPullRequestContributions || 0,
              "Code review": c.totalPullRequestReviewContributions || 0,
              Issues: c.totalIssueContributions || 0,
            };

            const labels = Object.keys(data);
            const values = Object.values(data);
            const total = values.reduce((a,b)=>a+b,0) || 1;
            const pct = values.map(v => (v/total)*100);

            // 2) Build a simple radar SVG (4 axes, filled polygon)
            const W = 720, H = 520;
            const cx = W/2, cy = H/2 + 10;
            const radius = 160;

            // Axes: top, right, bottom, left (match your screenshot order)
            const axes = [
              {label:"Code review",  pct: pct[2], angle:-Math.PI/2},
              {label:"Issues",       pct: pct[3], angle:0},
              {label:"Pull requests",pct: pct[1], angle: Math.PI/2},
              {label:"Commits",      pct: pct[0], angle: Math.PI},
            ];

            const toPoint = (r, ang) => [cx + r * Math.cos(ang), cy + r * Math.sin(ang)];
            const pts = axes.map(a => {
              const r = radius * (a.pct/100);
              return toPoint(r, a.angle);
            });

            const poly = pts.map(p => p.join(',')).join(' ');

            // Guidelines
            const guideLevels = [0.25, 0.5, 0.75, 1.0];

            const labelOffset = 46;

            const svg = `
            <svg width="${W}" height="${H}" viewBox="0 0 ${W} ${H}" xmlns="http://www.w3.org/2000/svg">
              <style>
                .bg { fill:#0b1220; }
                .axis { stroke:#2e3a55; stroke-width:2; }
                .guide { stroke:#1f2a44; stroke-width:1; fill:none; }
                .poly { fill:rgba(90, 255, 120, 0.25); stroke:#6BFF8A; stroke-width:3; }
                .dot { fill:#6BFF8A; stroke:#0b1220; stroke-width:2; }
                .label { fill:#b8c7e0; font: 18px/1.2 ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial; text-anchor:middle;}
                .label.small { font-size: 16px; }
                .pct { fill:#8fb4ff; font:14px/1.2 ui-sans-serif; text-anchor:middle; }
                .title { fill:#dfe7f6; font: 22px/1.2 ui-sans-serif; font-weight:600; }
              </style>

              <rect class="bg" x="0" y="0" width="${W}" height="${H}" rx="16"/>

              <!-- Axes -->
              ${axes.map(a=>{
                const [x, y] = toPoint(radius, a.angle);
                return `<line class="axis" x1="${cx}" y1="${cy}" x2="${x}" y2="${y}"/>`
              }).join('')}

              <!-- Guides -->
              ${guideLevels.map(g=>{
                const r = radius * g;
                const p = [toPoint(r,-Math.PI/2), toPoint(r,0), toPoint(r,Math.PI/2), toPoint(r,Math.PI)];
                return `<polygon class="guide" points="${p.map(_=>_.join(',')).join(' ')}"/>`
              }).join('')}

              <!-- Filled polygon -->
              <polygon class="poly" points="${poly}"/>
              ${pts.map(([x,y])=>`<circle class="dot" cx="${x}" cy="${y}" r="6"/>`).join('')}

              <!-- Labels & percents -->
              ${axes.map((a,i)=>{
                const [lx, ly] = toPoint(radius + labelOffset, a.angle);
                const p = Math.round(a.pct);
                const lbl = a.label;
                return `
                  <text class="label" x="${lx}" y="${ly - 6}">${p}%</text>
                  <text class="label small" x="${lx}" y="${ly + 16}">${lbl}</text>
                `;
              }).join('')}

              <!-- Title -->
              <text class="title" x="${cx - 280}" y="${cy - radius - 60}">Contribution types (last 12 months)</text>
            </svg>`;

            fs.writeFileSync('contrib-radar.svg', svg.trim());
            core.info('Wrote contrib-radar.svg');

      - name: Commit SVG
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update contribution radar"
          file_pattern: contrib-radar.svg
